#+startup: indent
#+auto_tangle: t
#+title:Notes on NUR publishing

* Updating on NUR
following [[https://github.com/nix-community/NUR][nix-community/NUR: Nix User Repository: User contributed nix packages]]

** Building packages
*** Testing
#+begin_src bash
nix-build --arg pkgs 'import <nixpkgs> {}' -A hello-nur
#+end_src

* Packaging toolkits
** notes on nix packages
*** common
- [[https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages][Nixpkgs/Create and debug packages - NixOS Wiki]]
- [[https://elatov.github.io/2022/01/building-a-nix-package/][Building a Nix Package | Karim's Blog]]
- [[https://github.com/justinwoo/nix-shorts/blob/master/posts/your-first-derivation.md][nix-shorts/your-first-derivation.md at master]]
- [[https://ianthehenry.com/posts/how-to-learn-nix/okay-my-actual-first-derivation/][How to Learn Nix, Part 11: Okay my actual first derivation]]

  #+begin_src bash
  nix-build -E 'with import <nixpkgs> {}; callPackage ./default.nix {}'
  #+end_src

**** exemples
- [[https://github.com/NixOS/nixpkgs/search?p=4&q=ninja][Search · ninja into nixpkgs · GitHub]]
**** debugging package
- use a shell
#+begin_src bash
nix-shell -E 'with import <nixpkgs> { }; callPackage ./dorito.nix { }'
#+end_src
- reproducing steps...
*** flakes?
- [[https://xeiaso.net/blog/nix-flakes-2-2022-02-27][Nix Flakes: Packages and How to Use Them - Xe]]
  - [[https://github.com/Xe/gohello/blob/caf54cdff7d8dd9bd9df4b3b783a72fe75c9a11e/flake.nix#L31-L54][gohello/flake.nix at caf54cdff7d8dd9bd9df4b3b783a72fe75c9a11e]]
- [[https://nixos.wiki/wiki/Flakes][Flakes - NixOS Wiki]]
- [[https://github.com/kstenerud/nixos-beginners-handbook/blob/main/build-flakes.md][nixos-beginners-handbook/build-flakes.md at main]]
- [[https://github.com/EHfive/flakes][EHfive/flakes: Nix/NixOS configurations & packages]]
*** licenses?
- [[https://github.com/NixOS/nixpkgs/blob/master/lib/licenses.nix][nixpkgs/licenses.nix at master · NixOS/nixpkgs · GitHub]]

* TODO [[https://github.com/lesharris/dorito][dorito: An IDE and Emulator for Chip-8, SuperCHIP, and XO-Chip]]
#+begin_src nix :tangle pkgs/dorito/default.nix
{ lib, stdenv, fetchgit, ninja, cmake, pkg-config }:

stdenv.mkDerivation rec {
  pname = "dorito";
  version = "0.5.0";

  src = fetchgit rec {
    url = "https://github.com/lesharris/dorito";
    fetchSubmodules = true;
    rev = "${version}";
    sha256 = "wvVqvfMP4KTMpu1pAePzJIzUEQyx8GJjXqJxjVysWzc=";
  };

  nativeBuildInputs = [ cmake ninja pkg-config ];
  cmakeFlags = [ "-G Ninja" ];

  meta = with lib; {
    description = "A Dev Environment for Chip8, SuperChip, and XO-Chip";
    license = licenses.unlicense;
    maintainers = with maintainers; [ vlnk ];
    platforms = platforms.unix;
  };
}
#+end_src

** build troubleshootings
- ~fetchFromGithub~ hasn't options that fetches git submodules
  - so I use ~fetchgit~ that has this option
    - [[https://github.com/NixOS/nix/pull/3166][NixOS/nix#3166 Add fetchSubmodules to builtins.fetchGit by blitz]]
- help
  - [[https://notes.burke.libbey.me/debugging-nix-gem/][Debugging a Nix Build Failure]]

*** Debugging the derivation
use ~nix derivation~ command:

#+begin_src bash
nix show-derivation /nix/store/yqz0nlxmikry5ccxiz4hd274qp394dss-dorito-0.5.0.drv
#+end_src

(it required the use of experimental nix commands)
- [[https://discourse.nixos.org/t/using-experimental-nix-features-in-nixos-and-when-they-will-land-in-stable/7401/3][Using experimental Nix features in Nixos, and when they will land in stable]]
- [[https://nixos.wiki/wiki/Nix_command][Nix command - NixOS Wiki]]
- [[https://nixos.org/manual/nix/stable/command-ref/experimental-commands.html][Experimental Commands]]

*** Issue with [[https://github.com/microsoft/vcpkg/tree/79211d3e4a8c79bc81858f1622b81d6ca6fed72e][vcpkg]] installation

* DONE [[https://github.com/JohnEarnest/c-octo][JohnEarnest/c-octo: A C rewrite of the Octo CHIP-8 IDE]]
CLOSED: [2022-10-01 Sat 15:36]
- [[https://github.com/JohnEarnest/c-octo/blob/main/docs/BuildGuide.md][c-octo/BuildGuide.md at main · JohnEarnest/c-octo]]

  #+begin_src nix :tangle pkgs/c-octo/default.nix
  { lib, stdenv, fetchgit, clang, SDL2 }:

  stdenv.mkDerivation rec {
    pname = "c-octo";
    version = "22.8.3";

    src = fetchgit rec {
      url = "https://github.com/JohnEarnest/c-octo";
      rev = "46cd9d913a957bef6cb959152992bf33f135839b";
      sha256 = "EXH+O1Wskn7rKIGZwuNeoxcXH3HABJhI2nHiJ0epzI4=";
    };

    nativeBuildInputs = [ clang ];
    buildInputs = [ SDL2 ];

    NIX_CFLAGS_COMPILE = "-Wno-error=unused-result";
    makeFlags = [
      "PREFIX=$(out)"
      "HOME=$(out)"
    ];

    configurePhase = ''
      mkdir -p $out/bin
    '';

    meta = with lib; {
      description = "A C rewrite of the Octo CHIP-8 IDE";
      license = licenses.mit;
      maintainers = with maintainers; [ vlnk ];
      platforms = platforms.unix;
    };
  }
  #+end_src

** build troubleshootings
- as the original c-octo isn't versionned, I decided to use [[https://calver.org/][Calendar Versioning — CalVer]] from the date of the referenced commit.
- only the Makefile required a hack by changing input environment vars
  - the [[https://github.com/JohnEarnest/c-octo/blob/main/docs/BuildGuide.md][c-octo/BuildGuide.md at main]] was quite useless
- as there is no ~configurePhase~, I used it to create the required folders
  - /maybe this is not the best practive?/
  - [[https://nixos.org/manual/nixpkgs/stable/#ssec-configure-phase][The configure phase - Nixpkgs 22.05 manual]]
  - I didn't override the ~installPase~ as [[https://github.com/NixOS/nixpkgs/blob/350fd0044447ae8712392c6b212a18bdf2433e71/pkgs/os-specific/darwin/dockutil/default.nix][nixpkgs/pkgs/os-specific/darwin/dockutil/default.nix]]
- use of ~math.h~ required ~glib~ or the use of specific compiler
  - the build manual recommends ~clang~
  - sometimes ~glib~ or ~gcc.libc~ are used
    - [[https://github.com/NixOS/nixpkgs/blob/71c3bdf0dcc98068223b0b9feb10e0c5dee89437/pkgs/development/libraries/embree/default.nix][nixpkgs/pkgs/development/libraries/embree/default.nix]]

* [[https://github.com/standard/standard#install][standard/standard: ⭐ JavaScript Style Guide, with linter & automatic code fixer]]
#+begin_src nix :tangle pkgs/standard/default.nix
{ lib, stdenv, mkYarnPackage, fetchFromGitHub, nodejs }:

stdenv.mkDerivation rec {
  pname = "standard";
  version = "16.0.4";
  name = "${pname}-${version}";

  src = fetchFromGitHub {
    owner = pname;
    repo = pname;
    rev = "f3e27f6b42d4e4745315d8026cd2017780a4565b";
    sha256 = "RBEfIPr6HmPlsIb8dJYjClINRmWrn+AOedFiUxwP1xk=";
  };

  nativeBuildInputs = [ nodejs ];

  configurePhase = "npm install";

  installPhase = ''
    mv ~/{bin,lib,node_modules,package.json,package-lock.json} $out/
  '';

  meta = with lib; {
    homepage = "https://github.com/${pname}/${pname}";
    license = licenses.mit;
    maintainers = [ maintainers.vlnk ];
    platforms = platforms.all;
  };
}
#+end_src

** troubleshooting notes
- ~standard.js~ doesn't keep the ~package-lock.json~ file in the git tree
  - it makes [[https://github.com/nix-community/yarn2nix][~yarn2nix~]] and [[https://github.com/svanderburg/node2nix][~node2nix~]] useless
- doing ~npm install~ without lock takes *too many time*!

*** TODO Fork the standard package
- release a ~package-lock.json~ version for each release!
